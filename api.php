<?php

/**
 * fonction de connexion
 * Le fait d'en faire une fonction permet d'Ã©viter les erreurs et rend le code plus propre
 * @return mysqli $conn instance de connexion  mysqli
 */
function connect() {
	$db_host = 'localhost';
	$db_user = 'root';
	$db_password = 'root';
	$db_db = 'produits';
	$db_port = 8889;

	$conn = new mysqli(
	$db_host,
	$db_user,
	$db_password,
	$db_db
	);

	if ($conn->connect_error) {
		echo 'Errno: '.$conn->connect_errno;
		echo '<br>';
		echo 'Error: '.$conn->connect_error;
		exit();
	}
	return $conn;
}

/**
 * dÃ©sormais nous sÃ©parons les requÃªtes Ã  la base de donnÃ©es du traitement des donnÃ©es pour les envoyer. Cette fonction sert Ã  analyser (parse) les rÃ©usltats (results) provenant de la bdd et Ã  les envoyer en tant que contenu JSON
 * 
 * cette fonction va donc envoyer une rÃ©ponse au client web (javascript la prendra alors dans la variable "response" suite au await fetch())
 * 
 * @param $result objet de rÃ©sultat de la bdd
 */
function parseResults($result) {
	// indication d'une entÃªte Ã  la rÃ©ponse HTTP. Cette entÃªte indique le type de contenu : ici du contenu JSON
	header("Content-Type: application/json");
	// on vÃ©rifie d'abord si les rÃ©sultats ne sont pas vides
	if ($result->num_rows > 0) {
		// puis on crÃ©er un tableau vide si ce n'est aps le cas
		$res = array();
		// notez cette approche diffÃ©rente qui suit une logique de tableau plus "classique". Je passe par l'indice du tableau pour insÃ©rer des valeurs, comme en algorithmique. Vous pouvez aussi remplacer cela par array_push() qui prend moins de lignes de code ðŸ˜œ
		$idx = 0;
		// on sort les donnÃ©es de chaque rangÃ©e (row) en forme de tableau associatif
		while($row = $result->fetch_assoc()) {
			// on ajoute ces Ã©lÃ©ments
			$res[$idx] = $row;
			// on incrÃ©mente l'indice (pas nÃ©cessaire si on utilise array_push)
			$idx = $idx + 1;
		}
		// on affiche le tableau de tableaux associatifs, transformÃ© en JSON par la fonction json_encode(). Cela signifie que la sortie sera du JSON pur. Si vous y mettez de l'HTML cela ne correspondra plus Ã  l'entÃªte application/json et retournera une erreur cÃ´tÃ© javascript qui sera complÃ¨tement dÃ©boussolÃ© le pauvre ðŸ¥²
		echo json_encode($res);
		// on utilise exit() pour bien s'assurer qu'on quitte le script PHP (il s'agit juste d'une prÃ©caution). Effectivement, l'API a renvoyÃ© le contenu en formaty JSON nous n'avons plus besoin de rien faire d'autre. Sa tÃ¢che est effectuÃ©.
		exit();
	} else {
		echo "0 results";
	}
}

/**
 * cette focntion findAll() est comme en TD8 mais elle possÃ¨de moins de lignes car elle ne s'occupe dÃ©sormais que de trouver les Ã©lÃ©ments. 
 * Le traitement du rÃ©usltat obtenu est exportÃ© vers parseResults() qui sera alors utilisÃ© dans plusieurs fonctions.
 * 
 * 
 * @param mysqli $conn objet de connexion mysqli
 */
function findAll($conn) {
	$sql = "SELECT * FROM vetements";
	$result = $conn->query($sql);
	// le rÃ©sultat a simplement besoin d'Ãªtre analysÃ© et envoyÃ© au format JSON.
	// Oh quelle coincidence ! Nous avons justement une fonction prÃ©vue pour cela ðŸ¤“
	parseResults($result);
}

/**
 * fonction findBy() dÃ©diÃ©e ) trouver (find) dans la base de donnÃ©es par (by) un filtre. bien que nous utilisons un seule filtre sur la colonne "gender", cette fonction est assez abstraite pour permettre de s'adapter Ã  toutes les colonnes :) C'est pouruqoi nous considÃ©rons les arguments du nom de colonne et de la valeur Ã  chercher
 * @param mysqli $conn objet de connexion mysqli
 * @param string $filterColumn nom de la colonne sur laquelle filtrer
 * @param string $filterValue valeur servant Ã  filtrer
 */
function findBy($conn, $filterColumn, $filterValue) {
	// on utilise la mÃ©thode prepare() pour prÃ©parer notre requÃªte SQL avec un paramÃ¨tre anonyme
	$statement = $conn->prepare("SELECT * FROM vetements WHERE $filterColumn = ? ;");
	// mainetnant qu'elle est prÃ©parÃ©e on utilise la mÃ©thode bind_param() pour associer une valeur provenant d'une variable $filterValue
	// cette valeur est une string donc nous indiquons la lettre "s"
	$statement->bind_param("s", $filterValue);
	// nous exÃ©cutons cette requÃªte prÃ©parÃ©e
	$statement->execute();
	// nous rÃ©cupÃ©rons les rÃ©sultats de cette exÃ©cution Ã  l'aide de la mÃ©thode get_result()
	$result = $statement->get_result();
	// encore une fois, nous n'avons besoin que d'utiliser cette super focntion. 
	// C'est le but de toute fonction : simplifier le code par une logique et permettre de rÃ©pÃ©ter cette logique sans avoir Ã  tout recoder
	// les fonctions = l'outil du flemmard malin ! ðŸ˜†
	parseResults($result);
}


// jusqu'ici notre code ne fait rien. Car nous avons dÃ©fini plusieurs fonctions sans les appeler. Ce n'est aps grave, voyez cela comme des LEGOs : nous avons dÃ©fini les briques et pouvons maintenant les utiliser ultra facilement :)

// commencons par la connexion. Hop : il suffit d'utiliser la fonction connect() et de rÃ©cupÃ©rer sa sortie
$conn = connect();

// ici nous contrÃ´ler l'arriver de requÃªtes GET uniquement. Si la super variable (variable toujours prÃ©sente qui informe du contexte comme $_GET $_POST $_SERVER $_COOKIES) n'est pas vide
if (count($_GET)){
	// ALORS nous vÃ©rifions si elle possÃ¨de la clÃ© filterby
	if (isset($_GET["filterby"])){
		// si c'est le cas nous utilisons la fonction findBy pour filtrer Ã  l'aide des clÃ©s filterby et filterval qui proviennent des arguments de requÃªte GET. concrÃ¨tement, ils provient par exemple de :
		// http://localhost:8888/td9/api.php?filterby=gender&filterval=women vous voyez bien que filterby est associÃ© Ã  "gender" et filterval associÃ© Ã  women. Les clÃ©s ont donc une valeur, d'oÃ¹ notre rÃ©cupÃ©ration sous forme de tableau associatif
		findBy($conn, $_GET["filterby"], $_GET["filterval"]);
	}
} else {
	// si la requÃªte GEt n'a pas de clÃ© alors on rend quand mÃªme tout le contenu de la bdd
	findAll($conn);
}

// bien entendu il manque quelques vÃ©rifications (la prÃ©sence de la clÃ© filterval par exemple)

// n'oubliez pas de fermer la connexion !
$conn->close();

?>

